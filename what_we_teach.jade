p.blurb
  | Developing software is much more than writing code, it is a means of communication between humans. True, we write code that is interpreted by machines, but only if we are capable of writing code that is readable by humans too. If we know how to efficiently communicate about this code, we will become a member of the community, and with the help of this community, we will build amazing things.
p.blurb
  | We will teach students everything they need to know to become a full stack developer working in a distributed, agile team. This includes these hard and soft skills:
  ul
    li
      | HTML5, CSS3, markdown, JavaScript in the browser, NodeJS (JavaScript on the server), RESTful APIs, package management systems for the client and the server
    li document-based databases
    li editing code using vim
    li version control with git
    li unit testing, test driven development, agile methodologies
    li the UNIX philosophy, combining processes, the command line, GNU tools
    li design patterns, code reuse, dependency management, authoring npm modules
    li software licences and other legal issues
    li
      | the history of programming - the people behind the projects, technologies and methods we use
    li
      | social coding - interactions with the open source community on GitHub, social dynamics of debating online, remote pair programming tools, how to talk about code, social dynamics of a pair programming session, peer review, team dynamics, code ownership, coding conventions
    li how to research effectively
    li crypto and security, common attack vectors, input validation
    li debugging, profiling, optimising
    li deployment, scaling, dev ops, infrastructure is code